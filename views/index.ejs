<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Faucet for Cosmos SDK Blockchain</title>
    <link rel="icon" href="https://s3.amazonaws.com/assets.allora.network/favicon.ico" />
    <meta name=”robots” content="index, follow">
    <meta name="description" content="Uniform Faucet Tool For Cosmos SDK Blockchains - Powered By Ping.pub">
    <link rel="preconnect" href="https://www.google.com">
    <link rel="preconnect" href="https://www.gstatic.com" crossorigin>
    <meta></head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <script src="https://www.google.com/recaptcha/api.js?render=explicit" async defer></script>
  </head>
  <body>
    <div id="app">
      <main class="container-md">
        <div class="py-5 text-center">
          <img id="logo" class="d-block mx-auto mb-4" style="max-width: 250px;" src="<%= project.logo %>" :alt="`${testnet} Faucet`">
          <h1><%= project.name %></h1>
          <p class="lead">Dear, Cosmonauts! <br>
              Welcome to <%= project.name %>! Are you looking for some tokens to start? 
          </p>
        </div>
        <div class="row g-5">
          <div class="d-flex flex-column">
            <div class="input-group">
                <span class="input-group-text">
                  <select v-model="chain" @change="onChange()">
                    <option v-for="c in conf.blockchains">{{c}}</option>
                  </select>
                </span>
                <input id="address" class="form-control" :placeholder="addressPlaceholder" v-model="address" name="address">
                <button id="tokens-request-button" type="button" class="btn btn-secondary d-flex flex-row" @click="validateReCaptcha">
                  <span>
                    <span id="address-button-loading" class="spinner-border spinner-border-sm mt-1 mr-1" style="display:none" role="status" aria-hidden="true"></span>
                  </span>
                <span class="sr-only">Request Token</span>
                </button>
            </div>
            <div id="message" v-html="message"></div>
          </div>
        </div>
        <!-- ReCaptcha badge -->
        <div id="recaptcha" class="g-recaptcha"></div>
      </main>
    
      <footer class="my-5 pt-5 text-muted text-center text-small">
        <p class="my-2"> Faucet Address: {{ faucet }}, <br> Balance: {{ balance.amount }} {{balance.denom}}</p>
        <p class="mb-1">&copy; 2024 Deployed By <%- project.deployer%></p>
        <ul class="list-inline">
          <li class="list-inline-item"><a href="https://github.com/ping-pub/faucet.git">Deploy a new instance?</a></li>
        </ul>
      </footer>
    </div>
    <script type="module">
      import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'

      window.app = createApp({
        data() {
          return {
            message: '',
            reqStatusMessage: '',
            testnet: 'Ping Testnet',
            logo: 'https://ping.pub/logo.svg',
            deployer: '',
            address: '',
            chain: '',
            conf: {},
            balance: {},
            ethAddr: '0xxxx',
            reCapchaSiteKey: '', 
          }
        },
        created() {
          fetch("/config.json").then(response => response.json()).then(data => {
            this.conf = data
            this.chain = data.blockchains[0]
            this.reCapchaSiteKey = data.reCaptchaSiteKey
            // this.placeholder = `Input an address (e.g.: ${data.sample[this.chain]}) to received tokens`
            this.onChange();
          });
        },
        mounted: function() {
            this.initReCaptcha();
        },
        computed: {
          addressPlaceholder() {
            if(this.conf.sample) {
              return `Input an address (e.g.: ${this.conf.sample[this.chain]}) to received tokens`
            } else {
              return 'Input an address to received tokens'
            }
          },
          addressRequestPlaceholder() {
            return `Input your address to check its status in the faucet processing queue`
          },
          faucet() {
            return this.conf.sample? this.conf.sample[this.chain] : ''
          }
        },
        methods: {
          initReCaptcha: function() {
              var self = this;
              setTimeout(function() {
                  if(typeof grecaptcha === 'undefined' || !self.reCapchaSiteKey) {
                      self.initReCaptcha();
                  }
                  else {
                      grecaptcha.render('recaptcha', {
                          sitekey: self.reCapchaSiteKey,
                          size: 'invisible',
                          badge: 'bottomright',
                          callback: self.submitRequestToken
                      });
                  }
              }, 100);
          },
          validateReCaptcha: function() {
              grecaptcha.execute();
          },
          submitRequestToken: async function(captcha_token) {
            try {
              await this.requestToken(captcha_token);
            } finally {
              // enseure recaptcha widget reset to allow multiple attemts to submit the form
              grecaptcha.reset();
            }
          },
          onChange() {
            this.balance = {} // reset balance
            fetch(`/balance/${this.chain}`).then(r => r.json()).then(balance => {
              this.balance = balance
            })
          },
          async fetchAddressStatus(address) {
            const response = await fetch(`/status/${address}`);
            const data = await response.json();
            return data
          },
          async requestToken(captcha_token) {
            const obj = document.getElementById("tokens-request-button");
            if (!this.address) {
              this.message = '<span class="text-danger">Address is required</span>';
              return;  
            }

            // button state
            obj.disabled = true;
            document.getElementById("address-button-loading").style.display = 'block';

            try {
              // validate address
              if (!this.address.startsWith(this.conf.addressPrefix) && !this.address.startsWith('0x')) {
                this.message = `
                <div class="alert alert-danger alert-dismissible show fade mt-2" role="alert">
                  <li>Address '${this.address}' is not supported.</li>
                </div>
                `;
                return;
              }
              
              // address is cleared, proceed to send tokens
              const response = await fetch('/send', {
                method: 'POST', 
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ chain: this.chain, address: this.address, recapcha_token: captcha_token }) // Convert the request body to a JSON string
              })
              const data = await response.json();
              
              if (response.status !== 201) {
                const alertClass = response.status >= 200 && response.status < 300  ? 'alert-warning' : 'alert-danger'; 
                this.message = `
                <div class="alert ${alertClass} alert-dismissible show fade mt-2" role="alert">
                  <li>${data.message}</li>
                </div>
                `;
                return;
              }
              // show result
              this.message = `
              <div class="alert alert-${data.code === 0 ? 'success' : 'danger'} alert-dismissible show fade mt-2" role="alert">
                <li>${data.message}</li>
              </div>
              `;
            } catch (e) {
              console.log(e)
              // show request failed message
              this.message = `
                <div class="alert alert-danger alert-dismissible show fade mt-2" role="alert">
                  <li>Request failed</li>
                </div>
              `;
            } finally {
              // button state
              obj.disabled = false;
              document.getElementById("address-button-loading").style.display = 'none';
            }
          }
        }
      }).mount('#app')
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
    <script>
    </script>
  </body>
</html>
